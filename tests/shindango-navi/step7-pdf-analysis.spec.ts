import { test, expect } from '@playwright/test';
import { ShindangoNaviApp } from '../../pages/app.page';
import { PdfVerifier } from '../../utils/pdfVerifier';

test.describe('Step 7: PDF Content Analysis', () => {
  let app: ShindangoNaviApp;
  let pdfVerifier: PdfVerifier;

  test.beforeEach(async ({ page }) => {
    app = new ShindangoNaviApp(page);
    pdfVerifier = new PdfVerifier('./test-downloads');
  });

  test('Analyze PDF Content', async ({ page }) => {
    console.log('\n=== Analyzing PDF Content ===');
    
    const testPostalCode = '0640941';
    
    // Complete workflow to Step 7 results page
    await app.completeToStep7Results(testPostalCode);
    await app.step7Results.verifyResultsPageLoaded();
    console.log('  ‚úì Results page loaded');
    
    // Download PDF
    const download = await app.step7Results.downloadPdfFromSaveButton();
    const pdfPath = await pdfVerifier.savePdfDownload(download, 'content-analysis.pdf');
    console.log(`  ‚úì PDF saved: ${pdfPath}`);
    
    // Extract and analyze PDF text
    try {
      const pdfText = await pdfVerifier.extractPdfText(pdfPath);
      console.log(`\nüìÑ PDF Content Analysis:`);
      console.log(`   - Total text length: ${pdfText.length} characters`);
      
      // Show first 500 characters
      console.log(`\nüìù First 500 characters of PDF:`);
      console.log(pdfText.substring(0, 500));
      console.log('...');
      
      // Show last 500 characters  
      console.log(`\nüìù Last 500 characters of PDF:`);
      console.log('...');
      console.log(pdfText.substring(Math.max(0, pdfText.length - 500)));
      
      // Search for common keywords
      const keywords = [
        'Êú≠Âπå', '‰∏≠Â§ÆÂå∫', 'ÂΩπÊâÄ', '‰øùÂÅ•', 'Á¶èÁ•â', 'Âú∞Âüü', 'ÂåÖÊã¨', 'ÊîØÊè¥', '„Çª„É≥„Çø„Éº',
        '011', '205', '520', '3304', '3668',
        '„Ç¢„Éâ„É¨„Çπ', 'address', '‰ΩèÊâÄ', 'ÈõªË©±', 'phone', 'tel'
      ];
      
      console.log(`\nüîç Keyword Analysis:`);
      keywords.forEach(keyword => {
        const count = (pdfText.toLowerCase().match(new RegExp(keyword.toLowerCase(), 'g')) || []).length;
        if (count > 0) {
          console.log(`   - "${keyword}": found ${count} time(s)`);
        }
      });
      
      // Check if PDF contains any Japanese text
      const hasJapanese = /[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/.test(pdfText);
      console.log(`   - Contains Japanese text: ${hasJapanese}`);
      
      // Check if PDF contains any numbers
      const hasNumbers = /\d/.test(pdfText);
      console.log(`   - Contains numbers: ${hasNumbers}`);
      
      // Save full text to file for inspection
      const fs = require('fs');
      const textPath = pdfPath.replace('.pdf', '.txt');
      fs.writeFileSync(textPath, pdfText, 'utf8');
      console.log(`   ‚úì Full text saved to: ${textPath}`);
      
    } catch (error) {
      console.log(`‚ùå PDF text extraction failed: ${error}`);
    }
    
    // Also check what's on the original results page
    console.log(`\nüìÑ Original Page Content Analysis:`);
    const pageText = await app.step7Results.getPageContent();
    console.log(`   - Page text length: ${pageText.length} characters`);
    
    // Search for contact info on original page
    const contactKeywords = [
      'Êú≠ÂπåÂ∏Ç‰∏≠Â§ÆÂå∫ÂΩπÊâÄ', '‰øùÂÅ•Á¶èÁ•âË™≤Á¶èÁ•âÊîØÊè¥‰∏Ä„Éª‰∫å‰øÇ', '011‚Äë205‚Äë3304',
      'Êú≠ÂπåÂ∏Ç‰∏≠Â§ÆÂå∫Êó≠„Ç±‰∏ò5‰∏ÅÁõÆ6-51', '‰∏≠Â§ÆÂå∫Á¨¨2Âú∞ÂüüÂåÖÊã¨ÊîØÊè¥„Çª„É≥„Çø„Éº', '011‚Äë520‚Äë3668'
    ];
    
    console.log(`\nüîç Contact Info on Original Page:`);
    contactKeywords.forEach(keyword => {
      const found = pageText.includes(keyword);
      console.log(`   - "${keyword}": ${found ? '‚úì FOUND' : '‚ùå NOT FOUND'}`);
    });
    
    console.log('\n=== Analysis Complete ===');
  });
});
